name: Build and Publish maven central
on:
  push:
  workflow_dispatch:
    inputs:
      maven_version:
        description: 'Maven version to release'
        required: true
      vault_version:
        description: 'Vault version for the release'
        required: true

jobs:
  build-n-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java & Maven
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          java-version: 8
          distribution: 'zulu'
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: OSSRH_USERNAME # env variable for username in deploy
          server-password: OSSRH_TOKEN # env variable for token in deploy
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import

      - name: Generate openapi
        run: |
          source VERSION
          cd sdk
          # update the generator config file with the required maven version
          sed -i "s/artifactVersion: \"$MAVEN_VERSION/artifactVersion: \"${{ inputs.maven_version }}/g" config.yaml
          # update the makefile with the required vault version
          sed -i "s/VAULT_VERSION\s:=\s$MAVEN_VERSION/VAULT_VERSION\s:=\s${{ inputs.maven_version }}/g" Makefile
          # generate Java sdk for the openapi
          make generate-openapi
          sudo chmod 755 ./openapi
          sudo chmod -R 644 ./openapi/*
          sudo chown -R runner ./openapi
          git apply patches/*.patch

      - name: Build and publish openapi
        working-directory: sdk/openapi
        run: mvn clean install -B -P sign-artifacts -DskipTests
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Update version of client pom.xml
        working-directory: sdk/client
        run: mvn versions:set -DnewVersion=${{ inputs.maven_version }}

      - name: Build and publish client
        working-directory: sdk/client
        run: mvn clean install -B -P sign-artifacts -DskipTests
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Update version of hibernate-encryption pom.xml
        working-directory: sdk/hibernate-encryption
        run: mvn versions:set -DnewVersion=${{ inputs.maven_version }}

      - name: Build and publish hibernate-encryption
        working-directory: sdk/hibernate-encryption
        run: mvn clean install -B -P sign-artifacts -DskipTests
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Update demo-app-hibernate-encryption
        run: |
          source VERSION
          cd examples/demo-app-hibernate-encryption
          sed -i "s/<vault-java\.version>$MAVEN_VERSION/<vault-java\.version>${{ inputs.maven_version }}/g" pom.xml
          sed -i "s/DOCKER_TAG=\"$VAULT_VERSION/DOCKER_TAG=\"${{ inputs.vault_version }}/g" run.sh

      - name: Update VERSION file
        run: echo -e 'VAULT_VERSION="${{ inputs.vault_version }}"\nMAVEN_VERSION="${{ inputs.maven_version }}"\n' > VERSION

      - name: Commit version changes and push
        run: |
          git config --global user.email "cicd@piiano.com"
          git config --global user.name "Github Actions"
          git add sdk/client/pom.xml sdk/hibernate-encryption/pom.xml VERSION
          git commit -m "Update maven version to ${{ inputs.maven_version }} and vault version to ${{ inputs.vault_version }}"
          git push

